{"version":3,"sources":["static/BOMB Generic Layout.png","pages/HomePage.js","static/home6.png","components/header.js","components/footer.js","components/Navigation.js","components/TankType.js","components/TankTypeList.js","pages/TankTypePage.js","components/Tank.js","components/TankList.js","pages/TankPage.js","components/Task.js","components/TaskList.js","pages/TaskPage.js","components/Lineup.js","components/LineupList.js","pages/LineupPage.js","components/Material.js","components/MaterialList.js","components/Specification.js","components/SpecificationList.js","pages/MaterialPage.js","pages/SpecificationPage.js","components/Test.js","components/TestList.js","pages/TestPage.js","pages/EditTankTypePage.js","pages/EditTankPage.js","pages/EditTaskPage.js","pages/EditLineupPage.js","pages/EditMaterialPage.js","pages/EditSpecificationPage.js","pages/EditTestPage.js","pages/CreateTankTypePage.js","pages/CreateTankPage.js","pages/CreateTaskPage.js","pages/CreateLineupPage.js","pages/CreateMaterialPage.js","pages/CreateSpecificationPage.js","pages/CreateTestPage.js","App.js","reportWebVitals.js","index.js"],"names":["HomePage","useHistory","id","src","flowDiagram","alt","Header","className","to","home2","height","Footer","dangerouslySetInnerHTML","Navigation","TankType","tankType","onEdit","onDelete","tankTypeName","count","tankNames","onClick","tankTypeID","TankTypeList","tankTypes","map","i","TankTypePage","setTankTypeToEdit","useState","setTankTypes","history","a","fetch","method","response","status","alert","newTankTypes","filter","m","console","error","log","Object","keys","values","push","loadTankTypes","json","data","useEffect","type","Tank","onTankClick","tank","tankID","tankName","pumpableVol","freeVol","capacity","materialName","srcOrDest","levelPercent","toFixed","TankList","tanks","rest","key","TankPage","setTankToEdit","setTanks","tasksUsingTank","setTasksUsingTank","filterValue","setFilterValue","filteredTanks","setFilteredTanks","newTanks","loadTanks","handleSetTasks","value","onChange","e","includes","target","length","task","taskID","taskDescription","Task","onTaskClick","taskVolume","destination","sources","TaskList","tasks","TaskPage","setTaskToEdit","setTasks","conflictingTasks","setConflictingTasks","newTasks","loadTasks","handleSetConflicts","Lineup","lineup","find","lineupID","tankDetails","LineupList","lineups","LineupPage","setLineupToEdit","setLineups","newLineups","loadLineups","Material","deleteHtml","onMatClick","material","some","materialID","color","MaterialList","materials","Specification","tests","specification","test","testID","specificationID","testName","maxLimit","minLimit","SpecificationList","specifications","MaterialPage","setMaterialToEdit","state","setState","prevState","loadMaterials","loadSpecifications","handleSetSpecs","matchingSpecs","spec","materialTestName","TestNumber","SpecificationPage","setSpecificationToEdit","setSpecifications","setTests","setMaterials","newSpecifications","loadTests","Test","onTestClick","testNumber","testDescription","TestList","TestPage","setTestToEdit","setMatchingSpecs","isExpanded","useCollapse","getCollapseProps","getToggleProps","headers","newTests","testMaterialNames","EditTankTypePage","tankTypeToEdit","setTankTypeName","editTankType","editedTankType","body","JSON","stringify","onCancel","placeholder","EditTankPage","tankToEdit","slice","setTankName","setTankTypeID","replaceAll","setPumpableVol","setCapacity","setSrcOrDest","setMaterialID","editTank","numPumpableVol","parseFloat","numCapacity","editedTank","sort","b","isNaN","Number","index","EditTaskPage","taskToEdit","parseInt","setTaskVolume","destinationTankID","setDestinationTankID","sourceTankIDs","setSourceTankIDs","destinationTank","setDestinationTank","sourceTank","setSourceTank","editTask","editedTask","transaction","newTask","newDestination","newSources","volumeValid","destinationValid","sourceValid","loadDestinationTanks","loadSourceTanks","name","disabled","selected","tankInfo","multiple","Array","from","selectedOptions","option","source","EditLineupPage","lineupToEdit","setTaskID","setTankID","editLineup","editedLineup","taskInfo","EditMaterialPage","materialToEdit","setMaterialName","editMaterial","editedMaterial","style","width","EditSpecificationPage","specificationToEdit","setMaxLimit","setMinLimit","setTestID","editSpecification","editedSpecification","EditTestPage","testToEdit","setTestNumber","setTestName","setTestDescription","editTest","editedTest","CreateTankTypePage","addTankType","newTankType","required","CreateTankPage","addTank","newTank","sortedMaterials","sortedTankTypes","CreateTaskPage","addTask","CreateLineupPage","addLineup","newLineup","CreateMaterialPage","addMaterial","newMaterial","CreateSpecificationPage","addSpecification","newSpecification","CreateTestPage","addTest","newTest","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa3a0474.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/BOMB Generic Layout.aa2324eb.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport flowDiagram from '../static/BOMB Generic Layout.png';\r\n\r\n\r\n// import { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction HomePage() {\r\n    // When a variable is within useState and it changes then the React App will re-render the DOM\r\n    const history = useHistory();\r\n    // const TankPage = \"./TankPage\"\r\n    return (\r\n        <>\r\n            <h2> Welcome to the BOMB!</h2>\r\n            <p>Edit the tables in the database via the links above.</p>\r\n            {/* <ul>\r\n                <li><Link to=\"./Tanks\">Tanks</Link></li>\r\n                <li><Link to=\"./TankTypes\">Tank Types</Link></li>\r\n                <li><Link to=\"./Tasks\">Tasks</Link></li>\r\n                <li><Link to=\"./Lineups\">Lineups</Link></li>\r\n                <li><Link to=\"./Materials\">Materials</Link></li>\r\n                <li><Link to=\"./Specifications\">Specifications</Link></li>\r\n                <li><Link to=\"./Tests\">Tests</Link></li>\r\n            </ul> */}\r\n            <div id='articleDiv'>\r\n            <article>\r\n            <p>The BOMB is a tank and lineup tracking tool used for completing tasks (the production of various finished products).</p>\r\n            <br></br>\r\n            <p>Each of the <em>Tanks</em>  is one of many <em>TankTypes</em>  and contain\r\n            <em>Materials</em>  that meet certain <em>Specifications</em> .  Each tank can either\r\n            be a source tank or a destination tank.  Finished product is produced via <em>Tasks</em>  that \r\n            specify how to route one or more source tanks to a single destination tank.  \r\n            The M:M table <em>Lineups</em>  keeps track of the connections between <em>Tanks</em>  and\r\n            <em>Tasks</em>  while the M:M table <em>Specifications</em>  keeps track of the connections\r\n            between <em>Materials</em>  and <em>Tests</em> .\r\n            </p>\r\n            <br></br>\r\n            <p>The BOMB is the tool that helps Big Oil achieve their highest priority objectives:</p>\r\n            <ol>\r\n                <li>Achieve zero safety incidents by monitoring the level in each of the tanks.</li>\r\n                <li>Make on-spec fuels by identifying conflicting tasks and thus preventing cross-contamination.</li>\r\n                <li>Optimize the blending process by providing all of the data necessary to interface with a blend optimizer.</li>\r\n            </ol>\r\n            <p>Below is a generic diagram showing the various components.</p>\r\n            <img src={flowDiagram} alt=\"BOMB generic flow diagram\"></img>\r\n            </article>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;","export default __webpack_public_path__ + \"static/media/home6.66196303.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// import { MdHome } from 'react-icons/md';\n// import NewExerciseIcon from './newExerciseIcon';\n// import home from '../home.png';\nimport home2 from '../static/home6.png';\n// import newExercise from \"../newExercise.png\";\n// import Navigation from \"./Navigation\";\n\nfunction Header() {\n  return (\n    <>\n        <hr></hr>\n          <nav className =\"navbarheader\">\n            <div className = \"navLeft\"></div>\n              <div className = \"navCenter\">\n                <header>\n                    <h1>Blending Oil Movements Bonanza</h1>\n                    <h4> A React/Express/MySql Project for CS340 Databases</h4>\n                </header>\n              </div>\n              <div className =\"navRight\" >\n                <Link to=\"/\"><img className=\"imgClass\" src={home2} height=\"125px\"></img></Link>\n             </div>\n                {/* <Link to=\"/create-test\"><img src={newExercise} height=\"100px\"></img></Link> */}\n          </nav>\n        <hr></hr>\n    </>\n  );\n}\nexport default Header;","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <>\n      <footer>\n        <h3><span dangerouslySetInnerHTML={{ \"__html\": \"&copy;\" }} />  2022 Carl Towner and Brent Goldman</h3>\n      </footer>\n    </>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\n\nfunction Navigation(){\n    return(\n        <nav className = 'Header-nav'>\n            <Link className = 'navLink' to=\"/Tanks\"> Tanks</Link>\n            <Link className = 'navLink' to=\"/TankTypes\"> TankTypes</Link>\n            <Link className = 'navLink' to=\"/Tasks\"> Tasks</Link>\n            <Link className = 'navLink' to=\"/Lineups\"> Lineups</Link>\n            <Link className = 'navLink' to=\"/Materials\"> Materials</Link>\n            <Link className = 'navLink' to=\"/Specifications\"> Specifications</Link>\n            <Link className = 'navLink' to=\"/Tests\"> Tests</Link>\n        </nav>\n    )\n}\n\nexport default Navigation;","import React from 'react';\r\nimport  { MdDeleteForever, MdEdit } from 'react-icons/md';\r\n\r\n\r\n\r\n\r\nfunction TankType({ tankType, onEdit, onDelete }) {\r\n    return (\r\n        <tr>\r\n            <td>{tankType.tankTypeName}</td>\r\n            <td>{tankType.count}</td>\r\n            <td>{tankType.tankNames}</td>\r\n            <td className='icon'>< MdEdit onClick={()=> onEdit(tankType)} /></td>\r\n            <td className='icon'>< MdDeleteForever onClick={()=> onDelete(tankType.tankTypeID)}/></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TankType;","import React from 'react';\r\nimport TankType from './TankType';\r\n\r\nfunction TankTypeList({ tankTypes, onEdit, onDelete }) {\r\n    return (\r\n        <table id=\"tankTypes\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Tank Type Name </th>\r\n                    <th>Count of Tanks Using Tank Type </th>\r\n                    <th>Tanks Using Tank Type </th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tankTypes.map((tankType, i) => <TankType tankType={tankType}\r\n                    onEdit={onEdit}\r\n                    onDelete={onDelete}\r\n                    key={i} />)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default TankTypeList;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TankTypeList from '../components/TankTypeList';\r\nimport { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction TankTypePage({ setTankTypeToEdit }) {\r\n    // When a variable is within useState and it changes then the React App will re-render the DOM\r\n    \r\n    const [tankTypes, setTankTypes] = useState([]);\r\n    const history = useHistory();\r\n\r\n    const onDelete = async (tankTypeID) => {\r\n        const table = \"TankTypes\";\r\n        const response = await fetch(`/${table}/${tankTypeID}`, {method: 'DELETE'});\r\n        // const response = await fetch(`/TankTypes/${tankTypeID}`, {method: 'DELETE'});\r\n        // console.log(`${response.blob()}`);\r\n        // console.log(`The response object keys are ${Object.keys(response)}`);\r\n        // console.log(`The response object is ${response}`);\r\n        // if (response.status === 200 && response.body.affectedRows === 1){\r\n        if (response.status === 204){\r\n        // if (response.affectedRows === 1) {\r\n            alert('The record was deleted.')\r\n            // alert(`The number of affected rows is ${response.body.affectedRows}`);  // undefined\r\n            // alert(`The number of affected rows is ${response.body.json()}`);  // Unhandled Rejection (TypeError): response.body.json is not a function\r\n            // console.log(`The response object keys are ${Object.keys(response.body)}`);\r\n            // console.log(`The response object is ${response}`); //readable stream\r\n            const newTankTypes = tankTypes.filter(m => m.tankTypeID !== tankTypeID);\r\n            setTankTypes(newTankTypes);\r\n            // const newTankTypes = tankTypes.filter(m => m.tankTypeID !== tankTypeID);\r\n            // setTankTypes(newTankTypes);\r\n        } else{\r\n            console.error(`Failed to delete tankType with tankTypeID = ${tankTypeID}, status code = ${response.status}`);\r\n        }\r\n    };\r\n\r\n    // const onEdit = async (tankType) => {\r\n    //     setTankTypeToEdit(tankType);\r\n    //     history.push(\"/edit-tankType\");\r\n    // };\r\n    const onEdit = async (tankType) => {\r\n        // const table = \"TankTypes\";\r\n        setTankTypeToEdit(tankType);\r\n        console.log(`onEdit tankType has keys: ${Object.keys(tankType)} and values ${Object.values(tankType)}`)\r\n        history.push(\"/edit-tankType\");\r\n    };\r\n\r\n    // Function will call the endpoint\r\n    const loadTankTypes = async () => {\r\n        // const response = await fetch('/TankTypes');\r\n        const response = await fetch('tankTypesInfo');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setTankTypes(data); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n    // useEffect requires a function (which it calls) and deps? is optional... [] = when component is first mounted\r\n    // useEffect cannot be an async function.  Need to have a function that calls an async function.\r\n    useEffect( () => {\r\n        loadTankTypes();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h2>Manage Tank Types</h2>\r\n            <p>There are many varities of tanks with the best choice determined by the properties of the material stored inside the tank.</p>\r\n            <Link to=\"/create-tankType\"><button type=\"button\">Add Tank Type</button></Link>\r\n            <TankTypeList tankTypes={tankTypes} onDelete={onDelete} onEdit={onEdit}></TankTypeList>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default TankTypePage;","import React from 'react';\r\nimport  { MdDeleteForever, MdEdit } from 'react-icons/md';\r\n\r\n\r\n\r\n\r\nfunction Tank({ onTankClick, tank, onEdit, onDelete }) {\r\n    return (\r\n        <tr>\r\n            {/* <td>{tank.tankName}</td> */}\r\n            <td className='link' onClick={()=> onTankClick(tank.tankID)}>{tank.tankName}</td>\r\n            <td>{tank.tankTypeName}</td>\r\n            <td>{tank.pumpableVol}</td>\r\n            <td>{tank.freeVol}</td>\r\n            <td>{tank.capacity}</td>\r\n            <td>{tank.materialName}</td>\r\n            <td>{tank.srcOrDest}</td>\r\n            <td>{tank.levelPercent.toFixed(2)}</td>\r\n            \r\n            <td className='icon'>< MdEdit onClick={()=> onEdit(tank)} /></td>\r\n            <td className='icon'>< MdDeleteForever onClick={()=> onDelete(tank.tankID)}/></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Tank;","import React from 'react';\r\nimport Tank from './Tank';\r\n\r\nfunction TankList({ tanks, ...rest }) {\r\n    return (\r\n        <table id=\"tanks\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Tank Name</th>\r\n                    <th>Tank Type</th>\r\n                    <th>Pumpable Volume (bbls)</th>\r\n                    <th>Free Volume (bbls)</th>\r\n                    <th>Capacity (bbls)</th>\r\n                    <th>Material</th>\r\n                    <th>Src/Dest</th>\r\n                    <th>Level (%)</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tanks.map((tank, i) => <Tank tank={tank}\r\n                    {...rest}\r\n                    key={i} />)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default TankList;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TankList from '../components/TankList';\r\nimport { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction TankPage({ setTankToEdit }) {\r\n    // When a variable is within useState and it changes then the React App will re-render the DOM\r\n    const [tanks, setTanks] = useState([]);\r\n    const history = useHistory();\r\n    const [tasksUsingTank, setTasksUsingTank] = useState()\r\n    const [filterValue, setFilterValue] = useState('')\r\n    const [filteredTanks, setFilteredTanks] = useState([])\r\n\r\n    const onDelete = async (tankID) => {\r\n        const table = \"Tanks\";\r\n        const response = await fetch(`/${table}/${tankID}`, { method: 'DELETE' });\r\n        if (response.status === 204) {\r\n            alert('The record was deleted.')\r\n            // window.location.reload();\r\n            const newTanks = tanks.filter(m => m.tankID !== tankID);\r\n            setTanks(newTanks);\r\n            setFilteredTanks(newTanks);\r\n        } else {\r\n            console.error(`Failed to delete tank with tankID = ${tankID}, status code = ${response.status}`);\r\n        }\r\n    };\r\n\r\n\r\n    const onEdit = async (tank) => {\r\n        // const table = \"Tanks\";\r\n        setTankToEdit(tank);\r\n        console.log(`onEdit tank has keys: ${Object.keys(tank)} and values ${Object.values(tank)}`)\r\n        history.push(\"/edit-tank\");\r\n    };\r\n\r\n    // Function will call the endpoint\r\n    const loadTanks = async () => {\r\n        const response = await fetch('/tanksInfo');\r\n        console.log(`The get response for loadTanks is ${response} which we're attempting to convert to JSON`)\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setTanks(data); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n        setFilteredTanks(data);\r\n    }\r\n    // useEffect requires a function (which it calls) and deps? is optional... [] = when component is first mounted\r\n    // useEffect cannot be an async function.  Need to have a function that calls an async function.\r\n    useEffect(() => {\r\n        loadTanks();\r\n    }, []);\r\n\r\n    const handleSetTasks = async (tankID) => {\r\n        const response = await fetch('tasksUsingTank(' + tankID + ')');\r\n        console.log(`The get response for tasksUsingTank is ${response} which we're attempting to convert to JSON`)\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setTasksUsingTank(data); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n\r\n    // Function is used to filter out tanks based on a search by the user\r\n    const handleFilter = (e) => {\r\n        const filteredTanks = tanks.filter(tank => tank.tankName.includes(e.target.value))\r\n        setFilterValue(e.target.value)\r\n        setFilteredTanks(filteredTanks)\r\n    }\r\n\r\n\r\n    console.log('tasksUsingTank', tasksUsingTank);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>Manage Details of the Tanks</h2>\r\n            <p>Each tank contains one material and may be involved in one or more tasks.</p>\r\n            <div className='Filter'>\r\n                {/* <label for=\"tankNameFilter\">Filter by Tank Name</label> */}\r\n                <div className='FilterText'>Filter by Tank Names</div>\r\n                <input\r\n                    id=\"tankNameFilter\"\r\n                    type=\"text\"\r\n                    value={filterValue}\r\n                    onChange={handleFilter} // onChange calls the function which passes the event\r\n                />\r\n            </div>\r\n            <Link to=\"/create-tank\"><button type=\"button\">Add Tank </button></Link>\r\n\r\n            <TankList onTankClick={handleSetTasks} tanks={filteredTanks} onDelete={onDelete} onEdit={onEdit}></TankList>\r\n            {tasksUsingTank?.length ?\r\n                <table>\r\n                    <caption className=\"tableTitle\">Tasks Using Tank</caption>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Task ID</th>\r\n                            <th>Description</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tasksUsingTank.map((task, i) =>\r\n                            <tr key={i}>\r\n                                <td>{task.taskID}</td>\r\n                                <td>{task.taskDescription}</td>\r\n                            </tr>)}</tbody></table> : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TankPage;","import React from 'react';\r\nimport  { MdDeleteForever, MdEdit } from 'react-icons/md';\r\n\r\n\r\n\r\n\r\nfunction Task({ onTaskClick, task, onEdit, onDelete }) {\r\n    return (\r\n        <tr>\r\n            <td className='link' onClick={()=> onTaskClick(task.taskID)}>{task.taskID}</td>\r\n            <td>{task.taskVolume}</td>\r\n            <td>{task.destination}</td>\r\n            <td>{task.sources}</td>\r\n            <td className='icon'>< MdEdit onClick={()=> onEdit(task)} /></td>\r\n            <td className='icon'>< MdDeleteForever onClick={()=> onDelete(task.taskID)}/></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\nfunction TaskList({ tasks, ...rest }) {\r\n    return (\r\n        <table id=\"tasks\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Task ID</th>\r\n                    <th>Task Volume</th>\r\n                    <th>Destination</th>\r\n                    <th>Sources</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tasks.map((task, i) => <Task task={task}\r\n                    {...rest}\r\n                    key={i} />)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default TaskList;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TaskList from '../components/TaskList';\r\nimport { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction TaskPage({ setTaskToEdit }) {\r\n    // When a variable is within useState and it changes then the React App will re-render the DOM\r\n    const [tasks, setTasks] = useState([]);\r\n    const history = useHistory();\r\n    const [conflictingTasks, setConflictingTasks] = useState()\r\n\r\n    const onDelete = async (taskID) => {\r\n        const table = \"Tasks\";\r\n        const response = await fetch(`/${table}/${taskID}`, {method: 'DELETE'});\r\n        if (response.status === 204){\r\n            alert('The record was deleted.')\r\n            const newTasks = tasks.filter(m => m.taskID !== taskID);\r\n            setTasks(newTasks);\r\n        } else{\r\n            console.error(`Failed to delete task with taskID = ${taskID}, status code = ${response.status}`);\r\n        }\r\n    };\r\n\r\n\r\n    const onEdit = async (task) => {\r\n        // const table = \"Tasks\";\r\n        setTaskToEdit(task);\r\n        console.log(`onEdit task has keys: ${Object.keys(task)} and values ${Object.values(task)}`)\r\n        history.push(\"/edit-task\");\r\n    };\r\n\r\n    // Function will call the endpoint\r\n    const loadTasks = async () => {\r\n        // const response = await fetch('/Tasks');\r\n        const response = await fetch('/tasksInfo');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setTasks(data); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n    // useEffect requires a function (which it calls) and deps? is optional... [] = when component is first mounted\r\n    // useEffect cannot be an async function.  Need to have a function that calls an async function.\r\n    useEffect( () => {\r\n        loadTasks();\r\n    }, []);\r\n\r\n    const handleSetConflicts = async (taskID) => {\r\n        const response = await fetch('conflictingTasks(' + taskID + ')');\r\n        console.log(`The get response for conflictingTasks is ${response} which we're attempting to convert to JSON`)\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setConflictingTasks(data); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n\r\n    console.log('conflictingTasks', conflictingTasks);\r\n\r\n    return (\r\n        <>\r\n            <h2>Manage Tasks and Associated Lineups</h2>\r\n            <p>Each task specifies a certain volume of finished product and, together with lineups, specifies which tanks are used.</p>\r\n            <Link to=\"/create-task\"><button type=\"button\">Add Task </button></Link>\r\n            <TaskList onTaskClick={handleSetConflicts} tasks={tasks} onDelete={onDelete} onEdit={onEdit}></TaskList>\r\n            {conflictingTasks?.length ? \r\n            <table>\r\n                <caption className=\"tableTitle\">Conflicting Tasks</caption>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Task ID</th>\r\n                        <th>Description</th>\r\n                    </tr>\r\n                </thead>\r\n            <tbody>\r\n            {conflictingTasks.map((task, i) =>\r\n                <tr key={i}>\r\n                    <td>{task.taskID}</td> \r\n                    <td>{task.taskDescription}</td>\r\n            </tr>)}</tbody></table> : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskPage;","import React from 'react';\r\nimport  { MdDeleteForever, MdEdit } from 'react-icons/md';\r\n\r\n\r\n\r\n\r\nfunction Lineup({ tanks, tasks, lineup, onEdit, onDelete }) {\r\n    \r\n    const tank = tanks.find(function (tank) {\r\n        return tank.tankID === lineup.tankID\r\n    });\r\n    \r\n    const task = tasks.find(function (task) {\r\n        return task.taskID === lineup.taskID\r\n    });\r\n    \r\n    return (\r\n        <tr>\r\n            <td>{lineup.lineupID}</td>\r\n            <td>{lineup.taskID}</td>\r\n            <td>{lineup.tankID}</td>\r\n            <td>{lineup.tankName}</td>\r\n            <td>{lineup.srcOrDest}</td>\r\n            <td>{lineup.tankDetails}</td>\r\n            <td className='icon'>< MdEdit onClick={()=> onEdit(lineup)} /></td>\r\n            <td className='icon'>< MdDeleteForever onClick={()=> onDelete(lineup.lineupID)}/></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Lineup;\r\n","import React from 'react';\r\nimport Lineup from './Lineup';\r\n\r\nfunction LineupList({ tasks, tanks, lineups, onEdit, onDelete }) {\r\n    return (\r\n        <table id=\"lineups\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Lineup ID</th>\r\n                    <th>Task ID</th>\r\n                    <th>Tank ID</th>\r\n                    <th>Tank Name</th>\r\n                    <th>Src/Dest</th>\r\n                    <th>Tank Details</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {lineups.map((lineup, i) => <Lineup \r\n                    tasks={tasks}\r\n                    tanks={tanks}\r\n                    lineup={lineup}\r\n                    onEdit={onEdit}\r\n                    onDelete={onDelete}\r\n                    key={i} />)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default LineupList;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport LineupList from '../components/LineupList';\r\nimport { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction LineupPage({ setLineupToEdit }) {\r\n    // When a variable is within useState and it changes then the React App will re-render the DOM\r\n    const [lineups, setLineups] = useState([]);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [tanks, setTanks] = useState([]);\r\n    const history = useHistory();\r\n\r\n    const onDelete = async (lineupID) => {\r\n        const table = \"Lineups\";\r\n        const response = await fetch(`/${table}/${lineupID}`, {method: 'DELETE'});\r\n        if (response.status === 204){\r\n            alert('The record was deleted.')\r\n            // window.location.reload();\r\n            const newLineups = lineups.filter(m => m.lineupID !== lineupID);\r\n            setLineups(newLineups);\r\n        } else{\r\n            console.error(`Failed to delete lineup with lineupID = ${lineupID}, status code = ${response.status}`);\r\n        }\r\n    };\r\n\r\n\r\n    const onEdit = async (lineup) => {\r\n        // const table = \"Lineups\";\r\n        setLineupToEdit(lineup);\r\n        console.log(`onEdit lineup has keys: ${Object.keys(lineup)} and values ${Object.values(lineup)}`)\r\n        history.push(\"/edit-lineup\");\r\n    };\r\n\r\n    // Function will call the endpoint\r\n    const loadLineups = async () => {\r\n        const response = await fetch('/lineupsInfo');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setLineups(data); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n    const loadTasks = async () => {\r\n        const response = await fetch('/Tasks');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setTasks(data); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n    const loadTanks = async () => {\r\n        const response = await fetch('/Tanks');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setTanks(data); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n    // useEffect requires a function (which it calls) and deps? is optional... [] = when component is first mounted\r\n    // useEffect cannot be an async function.  Need to have a function that calls an async function.\r\n    useEffect( () => {\r\n        loadLineups();\r\n        loadTasks();\r\n        loadTanks();\r\n    }, []);\r\n    \r\n    console.log(`Tasks are ${tasks}`)\r\n    console.log(`Tanks are ${tanks}`)\r\n\r\n    return (\r\n        <>\r\n            <h2>Manage the M:M Lineups Table - Associations between Tasks and Tanks</h2>\r\n            <p>Note: It is NOT recommended to use this page to add Lineups.  Use the Tasks page instead.</p>\r\n            <Link to=\"/create-lineup\"><button type=\"button\">Add Lineup </button></Link>\r\n            <div className=\"App-table\">\r\n                {tasks.length && tanks.length ? <LineupList tasks={tasks} tanks={tanks} lineups={lineups} onDelete={onDelete} onEdit={onEdit}></LineupList> : null}\r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default LineupPage;\r\n","import React from 'react';\r\nimport { MdDeleteForever, MdEdit } from 'react-icons/md';\r\n\r\n\r\n\r\n\r\nfunction Material({ onMatClick, tanks, material, onEdit, onDelete }) {\r\n\r\n    // Determine if material exists in tanks.  If it does than we don't want to allow delete\r\n    // because there is a SQL restriction\r\n    let deleteHtml;\r\n    const isMatch = tanks.some(function (tank) {\r\n        return tank.materialID === material.materialID\r\n    });\r\n    // console.log(isMatch);\r\n    if (isMatch) {\r\n        deleteHtml = <td className='icon'>< MdDeleteForever color=\"grey\" /></td>\r\n    }\r\n    else {\r\n        deleteHtml = <td className='icon'>< MdDeleteForever onClick={() => onDelete(material.materialID)} /></td>\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{material.materialID}</td>\r\n            <td className='link' onClick={() => onMatClick(material.materialID)}>{material.materialName}</td>\r\n            <td>{material.count}</td>\r\n            <td>{material.tankNames}</td>\r\n            <td className='icon'>< MdEdit onClick={() => onEdit(material)} /></td>\r\n            {/* <td className='icon'>< MdDeleteForever onClick={()=> onDelete(material.materialID)}/></td> */}\r\n            {deleteHtml}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Material;","import React from 'react';\r\nimport Material from './Material';\r\n\r\nfunction MaterialList({ materials, ...rest }) {\r\n    return (\r\n        <table id=\"materials\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Material ID</th>\r\n                    <th>Material Name</th>\r\n                    <th>Count of Tanks Using Material</th>\r\n                    <th>Tanks Using Material</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {materials.map((material, i) => <Material\r\n                    material={material}\r\n                    {...rest}\r\n                    key={i} />)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default MaterialList;\r\n","import React from 'react';\nimport { MdDeleteForever, MdEdit } from 'react-icons/md';\n\n\n\n\nfunction Specification({ materials, tests, specification, onEdit, onDelete }) {\n\n    // console.log('Materials', materials)\n    // console.log('Tests', tests)\n    // Determine the material by matching the specification.materialID with material.materialID\n    const material = materials.find(function (material) {\n        return material.materialID === specification.materialID\n    });\n\n    // Determine the material by matching the specification.materialID with material.materialID\n    const test = tests.find(function (test) {\n        return test.testID === specification.testID\n    });\n\n    return (\n        <tr>\n            <td>{specification.specificationID}</td>\n            <td>{material.materialName}</td>\n            <td>{test.testName}</td>\n            <td>{specification.maxLimit}</td>\n            <td>{specification.minLimit}</td>\n            {/* <td>{specification.testID}</td> */}\n            {/* <td>{specification.materialID}</td> */}\n            <td className='icon'>< MdEdit onClick={() => onEdit(specification)} /></td>\n            <td className='icon'>< MdDeleteForever onClick={() => onDelete(specification.specificationID)} /></td>\n        </tr>\n    );\n}\n\nexport default Specification;","import React from 'react';\nimport Specification from './Specification';\n\nfunction SpecificationList({ materials, tests, specifications, onEdit, onDelete }) {\n    return (\n        <table id=\"specifications\">\n            <thead>\n                <tr>\n                    <th>Specification ID</th>\n                    <th>Material Name</th>\n                    <th>Test Name</th>\n                    <th>Max Limit</th>\n                    <th>Min Limit</th>\n                    <th>Edit</th>\n                    <th>Delete</th>\n\n                </tr>\n            </thead>\n            <tbody>\n                {specifications.map((specification, i) => <Specification\n                    materials={materials}\n                    tests={tests}\n                    specification={specification}\n                    onEdit={onEdit}\n                    onDelete={onDelete}\n                    key={i} />)}\n            </tbody>\n        </table>\n    );\n}\n\nexport default SpecificationList;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MaterialList from '../components/MaterialList';\r\nimport { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport SpecificationList from '../components/SpecificationList';\r\n\r\nfunction MaterialPage({ setMaterialToEdit }) {\r\n    // When a variable is within useState and it changes then the React App will re-render the DOM\r\n    // const [materials, setMaterials] = useState([]);\r\n    const history = useHistory();\r\n    // const [tanks, setTanks] = useState([]);\r\n    // Use state variable instead of declaring each state separately\r\n    // Need to give materials and tanks initial state of an array so when passed to specificationlist they don't show as undefined\r\n    // This is why mataerial and tanks are inside useState()\r\n    const [state, setState] = useState({ materials: [], tanks: [] });\r\n\r\n    const onDelete = async (materialID) => {\r\n        const table = \"Materials\";\r\n        const response = await fetch(`/${table}/${materialID}`, { method: 'DELETE' });\r\n        if (response.status === 204) {\r\n            alert('The record was deleted.')\r\n            // window.location.reload();\r\n            const materials = state.materials.filter(m => m.materialID !== materialID);\r\n            // setMaterials(newMaterials);\r\n            setState(prevState => {\r\n                return { ...prevState, materials }\r\n            }); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n\r\n        } else {\r\n            console.error(`Failed to delete material with materialID = ${materialID}, status code = ${response.status}`);\r\n        }\r\n    };\r\n\r\n    const onEdit = async (material) => {\r\n        // const table = \"Materials\";\r\n        setMaterialToEdit(material);\r\n        console.log(`onEdit material has keys: ${Object.keys(material)} and values ${Object.values(material)}`)\r\n        history.push(\"/edit-material\");\r\n    };\r\n\r\n    // Function will call the endpoint\r\n    const loadMaterials = async () => {\r\n        const response = await fetch('/materialTankInfo');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setState(prevState => {\r\n            return { ...prevState, materials: data }  // ... puts all existing properties in prevState and then add / change materials with data\r\n        }); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n\r\n    // Loading Tanks to check for FK constraints\r\n    const loadTanks = async () => {\r\n        const response = await fetch('/Tanks');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setState(prevState => {\r\n            return { ...prevState, tanks: data }\r\n        }); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n\r\n    // Loading Specifications to show table when material is clicked\r\n    const loadSpecifications = async () => {\r\n        const response = await fetch('/Specifications');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setState(prevState => {\r\n            return { ...prevState, specifications: data }\r\n        }); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n\r\n    // useEffect requires a function (which it calls) and deps? is optional... [] = when component is first mounted\r\n    // useEffect cannot be an async function.  Need to have a function that calls an async function.\r\n    useEffect(() => {\r\n        loadMaterials();\r\n        loadTanks();\r\n        loadSpecifications();\r\n    }, []);\r\n\r\n    // Function for displaying Specification table when Material is clicked -- pass function to Material component\r\n    // const handleSetSpecs = (materialID) => {\r\n    //     // prevState is passed in as a variable to the anonymous function\r\n    //     // prevState is a state that contains multiple arrays\r\n    //     // ...prevState takes all prior information and adds or edits matchingSpecs to its state\r\n    //     // matchingSpecs is set via a filter function\r\n    //     // the filter function returns an array\r\n    //     // filter is looking at the prevState.specifications\r\n    //     // prevState.specifications are passed in one by one as variable spec \r\n    //     setState(prevState => {\r\n    //         return {\r\n    //             ...prevState, matchingSpecs: prevState.specifications.filter(spec =>\r\n    //                 spec.materialID === materialID\r\n    //             )\r\n    //         }\r\n    //     });\r\n    // }\r\n    const handleSetSpecs = async (materialID) => {\r\n        const response = await fetch('materialInfo(' + materialID + ')');\r\n        console.log(`The get response for materialInfo is ${response} which we're attempting to convert to JSON`)\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setState(prevState => {\r\n            return { ...prevState, matchingSpecs: data }\r\n        }); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n\r\n    console.log('state', state);\r\n    console.log(state.matchingSpecs)\r\n\r\n    // Future would be to add a component for the table so it isn't all shown below.  Import the component\r\n    return (\r\n        <>\r\n            <h2>Manage the Names of Materials</h2>\r\n            <p>Different materials can be stored in tanks.  Material names and which tanks use the materials can be found below.  <br></br> A material can also have one of more tests.  Selecting a material name will show the associated test and limits, if any.<br></br>Certain materials can't be deleted due to constraints.</p>\r\n            <Link to=\"/create-material\"><button type=\"button\">Add Material </button></Link>\r\n            <MaterialList onMatClick={handleSetSpecs} tanks={state.tanks} materials={state.materials} onDelete={onDelete} onEdit={onEdit}></MaterialList>\r\n\r\n            {/* ?. = only reads lengths if matchingSpecs is not undefined */}\r\n            {state.matchingSpecs?.length ?\r\n                <table>\r\n                    <caption className=\"tableTitle\">Associated Specifications</caption>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Material and Test Name</th>\r\n                            <th>Test Number</th>\r\n                            <th>Max Limit</th>\r\n                            <th>Min Limit</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {state.matchingSpecs.map((spec, i) =>\r\n                            <tr key={i}>\r\n                                <td>{spec.materialTestName}</td> {/* Concat data in first object */}\r\n                                <td>{spec.TestNumber}</td>\r\n                                <td>{spec.maxLimit}</td>\r\n                                <td>{spec.minLimit}</td>\r\n                            </tr>)}</tbody></table> : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MaterialPage;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SpecificationList from '../components/SpecificationList';\nimport { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nfunction SpecificationPage({ setSpecificationToEdit }) {\n    // When a variable is within useState and it changes then the React App will re-render the DOM\n    const [specifications, setSpecifications] = useState([]);\n    const history = useHistory();\n    const [tests, setTests] = useState([]);\n    const [materials, setMaterials] = useState([]);\n\n    const onDelete = async (specificationID) => {\n        const table = \"Specifications\";\n        const response = await fetch(`/${table}/${specificationID}`, { method: 'DELETE' });\n        if (response.status === 204) {\n            alert('The record was deleted.')\n            // window.location.reload();\n            const newSpecifications = specifications.filter(m => m.specificationID !== specificationID);\n            setSpecifications(newSpecifications);\n        } else {\n            console.error(`Failed to delete specification with specificationID = ${specificationID}, status code = ${response.status}`);\n        }\n    };\n\n    const onEdit = async (specification) => {\n        // const table = \"Specifications\";\n        setSpecificationToEdit(specification);\n        console.log(`onEdit specification has keys: ${Object.keys(specification)} and values ${Object.values(specification)}`)\n        history.push(\"/edit-specification\");\n    };\n\n    // Function will call the endpoint\n    const loadSpecifications = async () => {\n        const response = await fetch('/Specifications');\n        const data = await response.json();  // Returns the body of the response as a json\n        setSpecifications(data); // If we want the react framework to know that we've updated a variable then we have to update useState\n    }\n\n    // Function will call the endpoint\n    const loadTests = async () => {\n        const response = await fetch('/Tests');\n        const data = await response.json();  // Returns the body of the response as a json\n        setTests(data); // If we want the react framework to know that we've updated a variable then we have to update useState\n    }\n\n    // Function will call the endpoint\n    const loadMaterials = async () => {\n        const response = await fetch('/Materials');\n        const data = await response.json();  // Returns the body of the response as a json\n        setMaterials(data);\n        // console.log(data);\n    }\n\n    // useEffect requires a function (which it calls) and deps? is optional... [] = when component is first mounted\n    // useEffect cannot be an async function.  Need to have a function that calls an async function.\n    useEffect(() => {\n        loadSpecifications();\n        loadMaterials();\n        loadTests();\n    }, []);\n\n    console.log('Materials', materials)\n    console.log('Tests', tests)\n\n    return (\n        <>\n            <h2>Manage the M:M Specifications - Associations between Materials and Tests</h2>\n            <p>Specifications contain the relationships between materials and tests.  Each specification has a min and max limit.  <br></br>For instance, MOGAS material may have an RVP test that needs to be between 11 and 13 psi.</p>\n            <Link to=\"/create-specification\"><button type=\"button\">Add Specification </button></Link>\n            <div className=\"App-table\">\n                {materials.length && tests.length ? <SpecificationList materials={materials} tests={tests} specifications={specifications} onDelete={onDelete} onEdit={onEdit}></SpecificationList> : null}\n                {/* <SpecificationList materials = {materials} tests = {tests} specifications={specifications} onDelete={onDelete} onEdit={onEdit}></SpecificationList> */}\n            </div>\n\n        </>\n    );\n}\n\nexport default SpecificationPage;","import React from 'react';\r\nimport { MdDeleteForever, MdEdit } from 'react-icons/md';\r\n\r\n\r\n\r\n\r\nfunction Test({ onTestClick, test, onEdit, onDelete }) {\r\n    return (\r\n        <tr>\r\n            <td>{test.testID}</td>\r\n            <td className='link' onClick={() => onTestClick(test.testID)}>{test.testNumber}</td>\r\n            <td>{test.testName}</td>\r\n            <td>{test.testDescription}</td>\r\n            <td className='icon'>< MdEdit onClick={() => onEdit(test)} /></td>\r\n            <td className='icon'>< MdDeleteForever onClick={() => onDelete(test.testID)} /></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Test;","import React from 'react';\r\nimport Test from './Test';\r\n\r\nfunction TestList({ tests, ...rest }) {\r\n    return (\r\n        <table id=\"tests\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Test ID</th>\r\n                    <th>Test Number</th>\r\n                    <th>Test Name</th>\r\n                    <th>Test Description</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {tests.map((test, i) => <Test test={test}\r\n                    {...rest}\r\n                    key={i} />)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default TestList;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TestList from '../components/TestList';\r\nimport { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport useCollapse from 'react-collapsed';\r\n\r\nfunction TestPage({ setTestToEdit }) {\r\n    // When a variable is within useState and it changes then the React App will re-render the DOM\r\n    const [tests, setTests] = useState([]);\r\n    const history = useHistory();\r\n    const [matchingSpecs, setMatchingSpecs] = useState();\r\n    const [isExpanded, setExpanded] = useState(false);\r\n    const { getCollapseProps, getToggleProps } = useCollapse({ isExpanded })\r\n\r\n\r\n    const onDelete = async (testID) => {\r\n        const table = \"Tests\";\r\n        const response = await fetch(`/${table}/${testID}`, { method: 'DELETE', headers: { 'Content-Type': 'application/json' } });\r\n        if (response.status === 204) {\r\n            alert('The record was deleted.')\r\n            // window.location.reload();\r\n            const newTests = tests.filter(m => m.testID !== testID);\r\n            setTests(newTests);\r\n        } else {\r\n            console.error(`Failed to delete test with testID = ${testID}, status code = ${response.status}`);\r\n        }\r\n    };\r\n\r\n\r\n    const onEdit = async (test) => {\r\n        // const table = \"Tests\";\r\n        setTestToEdit(test);\r\n        console.log(`onEdit test has keys: ${Object.keys(test)} and values ${Object.values(test)}`)\r\n        history.push(\"/edit-test\");\r\n    };\r\n\r\n    // Function will call the endpoint\r\n    const loadTests = async () => {\r\n        const response = await fetch('/Tests');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setTests(data); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n    // useEffect requires a function (which it calls) and deps? is optional... [] = when component is first mounted\r\n    // useEffect cannot be an async function.  Need to have a function that calls an async function.\r\n    useEffect(() => {\r\n        loadTests();\r\n    }, []);\r\n\r\n    const handleSetSpecs = async (testID) => {\r\n        const response = await fetch('testInfo(' + testID + ')');\r\n        console.log(`The get response for testInfo is ${response} which we're attempting to convert to JSON`)\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        setMatchingSpecs(data); // If we want the react framework to know that we've updated a variable then we have to update useState\r\n    }\r\n\r\n    console.log('testInfo', matchingSpecs);\r\n\r\n    return (\r\n        <>\r\n            <h2>Manage Laboratory Tests for Materials</h2>\r\n            <p>A material can have one or more tests.  Selecting a test number will show the associated materials and limits, if any.</p>\r\n            <Link to=\"/create-test\"><button type=\"button\">Add Test </button></Link>\r\n            <TestList onTestClick={handleSetSpecs} tests={tests} onDelete={onDelete} onEdit={onEdit}></TestList>\r\n\r\n            {matchingSpecs?.length ?\r\n                <table>\r\n                    <caption className=\"tableTitle\">Associated Specifications</caption>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Test and Material Name</th>\r\n                            <th>Test Number</th>\r\n                            <th>Max Limit</th>\r\n                            <th>Min Limit</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {matchingSpecs.map((spec, i) =>\r\n                            <tr key={i}>\r\n                                <td>{spec.testMaterialNames}</td> {/* Concat data in first object */}\r\n                                <td>{spec.TestNumber}</td>\r\n                                <td>{spec.maxLimit}</td>\r\n                                <td>{spec.minLimit}</td>\r\n                            </tr>)}</tbody></table> : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TestPage;","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\n\r\n// const options = ['lbs', 'kgs']\r\n// const defaultOption = options[0]\r\n\r\n\r\nexport const EditTankTypePage = ({ tankTypeToEdit }) => {\r\n    const [tankTypeName, setTankTypeName] = useState(tankTypeToEdit.tankTypeName);\r\n    const history = useHistory();\r\n\r\n    const editTankType = async () => {\r\n        // Data validation\r\n        if (!tankTypeName) return alert(\"Pleaase enter a tank type!\")\r\n\r\n        const editedTankType = { tankTypeName };\r\n        console.log(editedTankType)\r\n        const response = await fetch(`/TankTypes/${tankTypeToEdit.tankTypeID}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(editedTankType),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        });\r\n        if (response.status === 200) {\r\n            alert(\"Successfully edited the tankType!\");\r\n        } else {\r\n            alert(`Failed to edit tankType, status code = ${response.status}`);\r\n        }\r\n        history.push(\"/TankTypes\")\r\n    };\r\n\r\n    const onCancel = async () => {\r\n        history.push(\"/TankTypes\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2>Edit the TankType</h2>\r\n            <table id=\"newTankType\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Tank Type Name</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <td>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={tankTypeName}\r\n                            placeholder=\"name of tankType\"\r\n                            onChange={e => setTankTypeName(e.target.value)} />\r\n                    </td>\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className='createCancel'>\r\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\r\n                <div className='flex-right'><button onClick={editTankType}> Save </button></div>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default EditTankTypePage;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\n\r\n// const options = ['lbs', 'kgs']\r\n// const defaultOption = options[0]\r\n\r\n\r\nexport const EditTankPage = ({ tankToEdit }) => {\r\n    const [tankName, setTankName] = useState(tankToEdit.tankName.slice(1));\r\n    const [tankTypeID, setTankTypeID] = useState(tankToEdit.tankTypeID);\r\n    const [pumpableVol, setPumpableVol] = useState(tankToEdit.pumpableVol.replaceAll(',', ''));\r\n    const [capacity, setCapacity] = useState(tankToEdit.capacity.replaceAll(',', ''));  // Need to remove comma in order for valid numeric\r\n    const [srcOrDest, setSrcOrDest] = useState(tankToEdit.srcOrDest);\r\n    const [materialID, setMaterialID] = useState(tankToEdit.materialID);\r\n    const [materials, setMaterials] = useState([]);\r\n    const [tankTypes, setTankTypes] = useState([]);\r\n    const history = useHistory();\r\n\r\n    const editTank = async () => {\r\n        // Data validation\r\n        const numPumpableVol = parseFloat(pumpableVol)\r\n        const numCapacity = parseFloat(capacity)\r\n\r\n        // Check if tank number exists\r\n        if (tankName.length < 1) return alert(\"Please enter a tank number\")\r\n\r\n        // Check if numbers are >= 0\r\n        const validNums = numPumpableVol > 0 && numCapacity > 0;\r\n        if (!validNums) return alert(\"Please ensure pumpable volume and capacity are > 0.\");\r\n\r\n        // Check capacity is greater than pumpable volume\r\n        if (numCapacity <= numPumpableVol) return alert(\"Please ensure capacity is > pumpable volume.\");\r\n\r\n        const editedTank = { tankName: 'T' + tankName, tankTypeID, pumpableVol, capacity, srcOrDest, materialID };\r\n        console.log(editedTank)\r\n        const response = await fetch(`/Tanks/${tankToEdit.tankID}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(editedTank),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        });\r\n        if (response.status === 200) {\r\n            alert(\"Successfully edited the tank!\");\r\n        } else {\r\n            alert(`Failed to edit tank, status code = ${response.status}`);\r\n        }\r\n        history.push(\"/Tanks\")\r\n    };\r\n\r\n    const onCancel = async () => {\r\n        history.push(\"/Tanks\");\r\n    };\r\n\r\n    // Function will call the endpoint\r\n    const loadMaterials = async () => {\r\n        const response = await fetch('/Materials');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        // const materialName = data.find(material => material.materialID === materialID)\r\n        setMaterials(data.sort((a, b) => {   // This will sort the array so the item ID passed into edit page is the first array element\r\n            if (a.materialID === materialID) return -1\r\n            return 0\r\n        }))\r\n    }\r\n\r\n    // Function will call the endpoint\r\n    const loadTankTypes = async () => {\r\n        const response = await fetch('/TankTypes');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        // const materialName = data.find(material => material.materialID === materialID)\r\n        setTankTypes(data.sort((a, b) => {   // This will sort the array so the item ID passed into edit page is the first array element\r\n            if (a.tankTypeID === tankTypeID) return -1\r\n            return 0\r\n        }))\r\n    }\r\n\r\n    // Call loadTests when page is initialized\r\n    useEffect(() => {\r\n        loadMaterials();\r\n        loadTankTypes();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h2>Edit the Tank</h2>\r\n            <table id=\"newTank\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Tank Number</th>\r\n                        <th>Tank Type</th>\r\n                        <th>Pumpable Volume</th>\r\n                        <th>Capacity</th>\r\n                        <th>Material</th>\r\n                        <th>Src/Dest</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <td>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={tankName}\r\n                            placeholder=\"(i.e. 123b)\"\r\n                            onChange={e => {\r\n                                if (!isNaN(Number(e.target.value)) || e.target.value.length === 0) setTankName(e.target.value)\r\n                                // if (/^\\d*(?:[a-zA-Z])?$/.test(e.target.value)) setTankName(e.target.value)\r\n                            }} />\r\n                    </td>\r\n                    <td>\r\n                        <select\r\n                            onChange={e => setTankTypeID(e.target.value)} >\r\n                            {tankTypes.map((tankType, index) => <option key={index} value={tankType.tankTypeID}>{tankType.tankTypeName}</option>)}\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={pumpableVol}\r\n                            placeholder=\"pumpable volume\"\r\n                            onChange={e => setPumpableVol(e.target.value)} />\r\n                    </td>\r\n                    <td>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={capacity}\r\n                            placeholder=\"capacity\"\r\n                            onChange={e => setCapacity(e.target.value)} />\r\n                    </td>\r\n                    <td>\r\n                        <select\r\n                            onChange={e => setMaterialID(e.target.value)} >\r\n                            {materials.map((material, index) => <option key={index} value={material.materialID}>{material.materialName}</option>)}\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <select onChange={e => setSrcOrDest(e.target.value)} >\r\n                            <option value=\"source\">source</option>\r\n                            <option value=\"destination\">destination</option>\r\n                        </select>\r\n                    </td>\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className='createCancel'>\r\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\r\n                <div className='flex-right'><button onClick={editTank}> Save </button></div>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default EditTankPage;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport 'react-dropdown/style.css';\r\n\r\n\r\nexport const EditTaskPage = ({ taskToEdit }) => {\r\n    const [taskVolume, setTaskVolume] = useState(parseInt(taskToEdit.taskVolume.replaceAll(',', '')));\r\n    const [destinationTankID, setDestinationTankID] = useState([])\r\n    const [sourceTankIDs, setSourceTankIDs] = useState([])\r\n    const [destinationTank, setDestinationTank] = useState([]);\r\n    const [sourceTank, setSourceTank] = useState([]);\r\n\r\n    const history = useHistory();\r\n\r\n    const editTask = async () => {\r\n        const editedTask = { taskVolume };\r\n        console.log(editedTask)\r\n\r\n        let transaction = {}\r\n        transaction.newTask = { taskVolume };\r\n        transaction.newDestination = { destinationTankID }\r\n        transaction.newSources = { sourceTankIDs }\r\n        console.log(`Transaction is keys: ${Object.keys(transaction)} and values: ${Object.values(transaction)}`);\r\n        console.log(`Transaction.newTask is keys: ${Object.keys(transaction.newTask)} and values: ${Object.values(transaction.newTask)}`)\r\n        console.log(`Transaction.newDestination is keys: ${Object.keys(transaction.newDestination)} and values: ${Object.values(transaction.newDestination)}`)\r\n        console.log(`Transaction.newSources is keys: ${Object.keys(transaction.newSources)} and values: ${Object.values(transaction.newSources)}`)\r\n\r\n        // Add data validation to ensure that the volume is a number > 0:\r\n        const volumeValid = taskVolume !== null && !isNaN(taskVolume) && taskVolume > 0;\r\n        console.log(`volumeValid = ${volumeValid}`);\r\n\r\n        // Add data validation to ensure a destination is chosen.\r\n        const destinationValid = destinationTankID.length >= 1;\r\n        console.log(`destinationTankID = ${destinationTankID}`)\r\n        console.log(`destinationTankID.length = ${destinationTankID.length}`)\r\n        console.log(`destinationValid = ${destinationValid}`)\r\n\r\n        // Add data validation to ensure at least one source is chosen.\r\n        const sourceValid = sourceTankIDs.length >= 1;\r\n        console.log(`sourceTankIDs = ${sourceTankIDs}`)\r\n        console.log(`sourceTankIDs.length = ${sourceTankIDs.length}`)\r\n        console.log(`sourceValid = ${sourceValid}`)\r\n\r\n        if (volumeValid && destinationValid && sourceValid) {\r\n            const response = await fetch(`/tasks/${taskToEdit.taskID}`, {\r\n                method: 'PUT',\r\n                body: JSON.stringify(transaction),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            });\r\n            if (response.status === 200) {\r\n                alert(\"Successfully edited the task!\");\r\n            } else {\r\n                alert(`Failed to edit task, status code = ${response.status}`);\r\n            }\r\n            history.push(\"/Tasks\");\r\n        } else {\r\n            alert(\"Data validation failed.  Volume must be number greater than zero.  One destionation tank must be selected.  At least one source tank must be selected.\")\r\n        }\r\n    };\r\n\r\n    const onCancel = async () => {\r\n        history.push(\"/Tasks\");\r\n    };\r\n\r\n    const loadDestinationTanks = async () => {\r\n        const response = await fetch('/destinationTankDropdown');\r\n        const data = await response.json();\r\n        setDestinationTank(data);\r\n    }\r\n\r\n    const loadSourceTanks = async () => {\r\n        const response = await fetch('/sourceTankDropdown');\r\n        const data = await response.json();\r\n        setSourceTank(data);\r\n    }\r\n\r\n    // Call loadDestinationTanks and loadSourceTanks when page is initialized\r\n    useEffect(() => {\r\n        loadDestinationTanks();\r\n        loadSourceTanks();\r\n    }, []);\r\n\r\n    console.log(`destinationTank = ${destinationTank}`);\r\n    console.log(`sourceTank = ${sourceTank}`);\r\n\r\n    return (\r\n        <>\r\n            <h2>Edit the Task</h2>\r\n            <table id=\"newTask\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Task Volume</th>\r\n                        <th>Destination Tank</th>\r\n                        <th>Source Tanks</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <td>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={taskVolume}\r\n                            placeholder=\"Number > 0\"\r\n                            onChange={e => setTaskVolume(e.target.value)} />\r\n                    </td>\r\n                    <td>\r\n                        <select name=\"destination_tank\"\r\n                            onChange={e => setDestinationTankID(e.target.value)} >\r\n                            <option disabled=\"disabled\" selected=\"selected\">Select a destination tank.</option>\r\n                            {destinationTank.map((destination, index) => <option key={index} value={destination.tankID}>{destination.tankName + ': ' + destination.tankInfo}</option>)}\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <select name=\"source_tanks[]\" multiple=\"multiple\"\r\n                            onChange={e => setSourceTankIDs(Array.from(e.target.selectedOptions, (option) => option.value))} >\r\n                            {sourceTank.map((source, index) => <option key={index} value={source.tankID}>{source.tankName + ': ' + source.tankInfo}</option>)}\r\n                        </select>\r\n                    </td>\r\n                </tbody>\r\n            </table>\r\n\r\n            {console.log(`Destination tank IDs: ${destinationTankID}`)}\r\n            {console.log(`Source tank IDs: ${sourceTankIDs}`)}\r\n\r\n            <div className='createCancel'>\r\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\r\n                <div className='flex-right'><button onClick={editTask}> Save </button></div>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default EditTaskPage;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport  Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\n\r\n\r\nexport const EditLineupPage = ({ lineupToEdit }) => {\r\n    const [taskID, setTaskID] = useState(lineupToEdit.taskID);\r\n    const [tankID, setTankID] = useState(lineupToEdit.tankID);\r\n    const [tanks, setTanks] = useState([]);\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const history = useHistory();\r\n\r\n    const editLineup = async () => {\r\n        const editedLineup = { taskID, tankID };\r\n        console.log(editedLineup)\r\n        const response = await fetch(`/lineups/${lineupToEdit.lineupID}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(editedLineup),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        });\r\n        if (response.status === 200) {\r\n            alert(\"Successfully edited the lineup!\");\r\n        } else {\r\n            alert(`Failed to edit lineup, status code = ${response.status}`);\r\n        }\r\n        history.push(\"/Lineups\")\r\n    };\r\n\r\n    const onCancel = async () => {\r\n        history.push(\"/Lineups\");\r\n    };\r\n\r\n    // Function will call the endpoint\r\n    const loadTanks = async () => {\r\n        const response = await fetch('/tanksDropdown');\r\n        const data = await response.json();  \r\n        // setTanks(data);\r\n        setTanks(data.sort((a, b) => {  // This will sort the array so the item ID passed into edit page is the first array element\r\n            if (a.tankID === tankID) return -1\r\n            return 0\r\n        }))\r\n    }\r\n\r\n    // Function will call the endpoint\r\n    const loadTasks = async () => {\r\n        const response = await fetch('/tasksDropdown');\r\n        const data = await response.json(); \r\n        // setTasks(data);\r\n        setTasks(data.sort((a, b) => {  // This will sort the array so the item ID passed into edit page is the first array element\r\n            if (a.taskID === taskID) return -1\r\n            return 0\r\n        }))\r\n    }\r\n\r\n    // Call loadTanks when page is initialized\r\n    useEffect(() => {\r\n        loadTanks();\r\n        loadTasks();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        <h2>Edit the Lineup</h2>\r\n        <table id=\"newLineup\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Lineup ID</th>\r\n                    <th>Task</th>\r\n                    <th>Tank</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <td>\r\n                    {lineupToEdit.lineupID}\r\n                </td>\r\n                <td>\r\n                    <select\r\n                        onChange={e => setTaskID(e.target.value)} >\r\n                        {tasks.map((task, index) => <option key={index} value={task.taskID}>{task.taskInfo}</option>)}\r\n                    </select>\r\n                </td>\r\n                <td>\r\n                    <select\r\n                        onChange={e => setTankID(e.target.value)} >\r\n                        {tanks.map((tank, index) => <option key={index} value={tank.tankID}>{tank.tankInfo}</option>)}\r\n                    </select>\r\n                </td>\r\n            </tbody>\r\n        </table>\r\n        \r\n        <div className='createCancel'>\r\n            <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\r\n            <div className='flex-right'><button onClick={editLineup}> Save </button></div>\r\n        </div>\r\n        </>\r\n        \r\n    );\r\n}\r\n\r\nexport default EditLineupPage;","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\n\r\n// const options = ['lbs', 'kgs']\r\n// const defaultOption = options[0]\r\n\r\n\r\nexport const EditMaterialPage = ({ materialToEdit }) => {\r\n    const [materialName, setMaterialName] = useState(materialToEdit.materialName);\r\n    const history = useHistory();\r\n\r\n    const editMaterial = async () => {\r\n        // Data validation\r\n        // Ensure material name exists\r\n        if (!materialName) return alert(\"Please enter a material name.\");\r\n\r\n        const editedMaterial = { materialName };\r\n        console.log(editedMaterial)\r\n        const response = await fetch(`/materials/${materialToEdit.materialID}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(editedMaterial),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        });\r\n        if (response.status === 200) {\r\n            alert(\"Successfully edited the material!\");\r\n        } else {\r\n            alert(`Failed to edit material, status code = ${response.status}`);\r\n        }\r\n        history.push(\"/Materials\")\r\n    };\r\n\r\n    const onCancel = async () => {\r\n        history.push(\"/Materials\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2>Edit the Material</h2>\r\n            <table id=\"newMaterial\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Material Name</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <td>\r\n                        <input style={{ width: '370px' }}\r\n                            type=\"text\"\r\n                            value={materialName}\r\n                            placeholder=\"name of material\"\r\n                            onChange={e => setMaterialName(e.target.value)} />\r\n                    </td>\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className='createCancel'>\r\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\r\n                <div className='flex-right'><button onClick={editMaterial}> Save </button></div>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default EditMaterialPage;","import React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from \"react-router-dom\";\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport SelectUnits from '../components/unitSelection';\nimport Specification from '../components/Specification';\n\n\n// export const EditSpecificationPage = ({ specificationToRepeat }) => {\nexport const EditSpecificationPage = ({ specificationToEdit }) => {\n    // console.log(specificationToRepeat);\n    // let repeatSpecification = Object.keys(specificationToRepeat).length !== 0;\n    // console.log(repeatSpecification)\n    const [maxLimit, setMaxLimit] = useState(specificationToEdit.maxLimit);\n    const [minLimit, setMinLimit] = useState(specificationToEdit.minLimit);\n    const [testID, setTestID] = useState(specificationToEdit.testID);\n    const [materialID, setMaterialID] = useState(specificationToEdit.materialID);\n    const history = useHistory();\n    const [tests, setTests] = useState([]);\n    const [materials, setMaterials] = useState([]);\n\n    const editSpecification = async () => {\n        // Data validation\n        // Ensure min and max limits are not undefined and have a value\n        if (!maxLimit || !minLimit) return alert(\"Please enter min and max limits\")\n\n        // Ensure max limit is greater than min limit\n        if (parseInt(maxLimit) < parseInt(minLimit)) return alert(\"Please ensure max limit is greater than min limit\")\n\n        const editedSpecification = { maxLimit, minLimit, testID, materialID };\n        console.log(editedSpecification)\n        const response = await fetch(`/specifications/${specificationToEdit.specificationID}`, {\n            method: 'PUT',\n            body: JSON.stringify(editedSpecification),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n        if (response.status === 200) {\n            alert(\"Successfully edited the specification.\");\n        } else {\n            alert(`Failed to edit specification, status code = ${response.status}`);\n        }\n        history.push(\"/specifications\");\n    };\n\n    const onCancel = async () => {\n        history.push(\"/specifications\");\n    };\n\n    // Function will call the endpoint\n    const loadTests = async () => {\n        const response = await fetch('/Tests');\n        const data = await response.json();  // Returns the body of the response as a json\n        // setTests(data); // If we want the react framework to know that we've updated a variable then we have to update useState\n        setTests(data.sort((a, b) => {  // This will sort the array so the item ID passed into edit page is the first array element\n            if (a.testID === testID) return -1\n            return 0\n        }))\n    }\n\n    // Function will call the endpoint\n    const loadMaterials = async () => {\n        const response = await fetch('/Materials');\n        const data = await response.json();  // Returns the body of the response as a json\n        // const materialName = data.find(material => material.materialID === materialID)\n        setMaterials(data.sort((a, b) => {   // This will sort the array so the item ID passed into edit page is the first array element\n            if (a.materialID === materialID) return -1\n            return 0\n        }))\n    }\n\n    // Call loadTests when page is initialized\n    useEffect(() => {\n        loadTests();\n        loadMaterials();\n    }, []);\n\n\n    console.log(materials)\n    return (\n        <>\n            <h2>Edit a Specification</h2>\n            <table id=\"newSpecification\">\n                <thead>\n                    <tr>\n                        <th>Max Limit</th>\n                        <th>Min Limit</th>\n                        <th>Test</th>\n                        <th>Material</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <td>\n                        <input\n                            type=\"number\"\n                            value={maxLimit}\n                            placeholder=\"max limit\"\n                            onChange={e => setMaxLimit(e.target.value)} />\n                    </td>\n                    <td>\n                        <input\n                            type=\"number\"\n                            value={minLimit}\n                            placeholder=\"min limit\"\n                            onChange={e => setMinLimit(e.target.value)} />\n                    </td>\n                    <td>\n                        <select onChange={e => setTestID(e.target.value)} >\n                            {tests.map((test, index) => <option key={index} value={test.testID}>{test.testName}</option>)}\n                        </select>\n                    </td>\n                    <td>\n                        <select\n                            onChange={e => setMaterialID(e.target.value)} >\n                            {materials.map((material, index) => <option key={index} value={material.materialID}>{material.materialName}</option>)}\n                        </select>\n                    </td>\n                </tbody>\n            </table>\n\n            <div className='createCancel'>\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\n                <div className='flex-right'><button onClick={editSpecification}>Save</button></div>\n            </div>\n        </>\n    );\n}\n\nexport default EditSpecificationPage;","import React, { useState } from 'react';\nimport { useHistory, Link } from \"react-router-dom\";\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport SelectUnits from '../components/unitSelection';\n\n// const options = ['lbs', 'kgs']\n// const defaultOption = options[0]\n\nexport const EditTestPage = ({ testToEdit }) => {\n    const [testNumber, setTestNumber] = useState(testToEdit.testNumber.slice(1));\n    const [testName, setTestName] = useState(testToEdit.testName);\n    const [testDescription, setTestDescription] = useState(testToEdit.testDescription);\n\n    const history = useHistory();\n\n    const editTest = async () => {\n        // Data validation\n        // Check if test number exists\n        if (!testNumber) return alert(\"Please enter a test number\")\n\n        // Check if names and descriptions exist\n        if (!testName || !testDescription) return alert(\"Please enter a test name and test description\");\n\n        const editedTest = { testNumber: 'D' + testNumber, testName, testDescription };\n        console.log(editedTest)\n        const response = await fetch(`/tests/${testToEdit.testID}`, {\n            method: 'PUT',\n            body: JSON.stringify(editedTest),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n        if (response.status === 200) {\n            alert(\"Successfully edited the test.\");\n        } else {\n            alert(`Failed to edit test, status code = ${response.status}`);\n        }\n        history.push(\"/tests\");\n    };\n\n    const onCancel = async () => {\n        history.push(\"/tests\");\n    };\n\n    return (\n        <>\n            <h2>Edit a Test</h2>\n            <table id=\"newTest\">\n                <thead>\n                    <tr>\n                        <th>Test Number</th>\n                        <th>Test Name</th>\n                        <th>Test Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <td>\n                        <input\n                            type=\"text\"\n                            value={testNumber}\n                            placeholder=\"i.e. 123\"\n                            onChange={e => {\n                                if (!isNaN(Number(e.target.value)) || e.target.value.length === 0) setTestNumber(e.target.value)\n                            }} />\n                    </td>\n                    <td>\n                        <input\n                            type=\"text\"\n                            value={testName}\n                            placeholder=\"name of test\"\n                            onChange={e => setTestName(e.target.value)} />\n                    </td>\n                    <td>\n                        <input\n                            type=\"text\"\n                            value={testDescription}\n                            placeholder=\"description of test\"\n                            onChange={e => setTestDescription(e.target.value)} />\n                    </td>\n                </tbody>\n            </table>\n\n            <div className='createCancel'>\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\n                <div className='flex-right'><button onClick={editTest}>Save</button></div>\n            </div>\n        </>\n    );\n}\n\nexport default EditTestPage;","import React, { useState } from 'react';\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport SelectUnits from '../components/unitSelection';\r\n\r\n\r\n// export const CreateTankTypePage = ({ tankTypeToRepeat }) => {\r\nexport const CreateTankTypePage = () => {\r\n    // console.log(tankTypeToRepeat);\r\n    // let repeatTankType = Object.keys(tankTypeToRepeat).length !== 0;\r\n    // console.log(repeatTankType)\r\n    // let today = new Date();\r\n    // let mm = String(today.getMonth() + 1);\r\n    // if (mm.length == 1){\r\n    // mm = \"0\" + mm\r\n    // }\r\n    // let dd = String(today.getDate());\r\n    // if (dd.length == 1){\r\n    // dd = \"0\" + dd\r\n    // }\r\n    // let yy = String(today.getFullYear()).slice(2);\r\n    // let fToday = mm + \"-\" + dd + \"-\" + yy;\r\n\r\n    const [tankTypeName, setTankTypeName] = useState();\r\n    // const [tankTypeName, setTankTypeName] = useState(repeatTankType ? tankTypeToRepeat.name : '');\r\n    // const [reps, setReps] = useState(repeatTankType ? tankTypeToRepeat.reps : '');\r\n    // const [weight, setWeight] = useState(repeatTankType ? tankTypeToRepeat.weight : '');\r\n    // const [unit, setUnit] = useState(repeatTankType ? tankTypeToRepeat.unit : '');\r\n    // const [date, setDate] = useState(repeatTankType ? fToday : '');\r\n\r\n    const history = useHistory();\r\n\r\n    const addTankType = async () => {\r\n        // Data validation\r\n        if (!tankTypeName) return alert(\"Pleaase enter a tank type!\")\r\n\r\n        const newTankType = { tankTypeName };\r\n        console.log(newTankType)\r\n        const response = await fetch('/tankTypes', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newTankType),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        if (response.status === 201) {\r\n            alert(\"Successfully added the tankType.\");\r\n        } else {\r\n            alert(`Failed to add tankType, status code = ${response.status}`);\r\n        }\r\n        history.push(\"/tankTypes\");\r\n    };\r\n\r\n    const onCancel = async () => {\r\n        history.push(\"/tankTypes\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2>Add a Type of Tank</h2>\r\n            <table id=\"newTankType\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Tank Type Name</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <td>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={tankTypeName}\r\n                            placeholder=\"name of tankType\"\r\n                            onChange={e => setTankTypeName(e.target.value)}\r\n                            required />\r\n                    </td>\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className='createCancel'>\r\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\r\n                <div className='flex-right'><button onClick={addTankType}>Create</button></div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateTankTypePage;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport SelectUnits from '../components/unitSelection';\r\n\r\n// const options = ['lbs', 'kgs']\r\n// const defaultOption = options[0]\r\n\r\n// export const CreateTankPage = ({ tankToRepeat }) => {\r\nexport const CreateTankPage = () => {\r\n    // console.log(tankToRepeat);\r\n    // let repeatTank = Object.keys(tankToRepeat).length !== 0;\r\n    // console.log(repeatTank)\r\n    // let today = new Date();\r\n    // let mm = String(today.getMonth() + 1);\r\n    // if (mm.length == 1){\r\n    // mm = \"0\" + mm\r\n    // }\r\n    // let dd = String(today.getDate());\r\n    // if (dd.length == 1){\r\n    // dd = \"0\" + dd\r\n    // }\r\n    // let yy = String(today.getFullYear()).slice(2);\r\n    // let fToday = mm + \"-\" + dd + \"-\" + yy;\r\n\r\n    const [tankName, setTankName] = useState('');\r\n    const [tankTypeID, setTankTypeID] = useState([]);\r\n    const [pumpableVol, setPumpableVol] = useState();\r\n    const [capacity, setCapacity] = useState();\r\n    const [srcOrDest, setSrcOrDest] = useState(['source']);\r\n    const [materialID, setMaterialID] = useState([]);\r\n    const [materials, setMaterials] = useState([]);\r\n    const [tankTypes, setTankTypes] = useState([]);\r\n    const history = useHistory();\r\n\r\n    const addTank = async () => {\r\n        // Data validation\r\n        const numPumpableVol = parseFloat(pumpableVol)\r\n        const numCapacity = parseFloat(capacity)\r\n\r\n        // Check if tank number exists\r\n        if (tankName.length < 1) return alert(\"Please enter a tank number\")\r\n\r\n        // Check if numbers are >= 0\r\n        const validNums = numPumpableVol > 0 && numCapacity > 0;\r\n        if (!validNums) return alert(\"Please ensure pumpable volume and capacity are > 0.\");\r\n\r\n        // Check capacity is greater than pumpable volume\r\n        if (numCapacity <= numPumpableVol) return alert(\"Please ensure capacity is > pumpable volume.\");\r\n\r\n        const newTank = { tankName: 'T' + tankName, tankTypeID, pumpableVol, capacity, srcOrDest, materialID };\r\n        // const newTank = { tankName, tankTypeID, pumpableVol, capacity, srcOrDest, materialID };\r\n        console.log(newTank)\r\n        const response = await fetch('/Tanks', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newTank),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        if (response.status === 201) {\r\n            alert(\"Successfully added the tank.\");\r\n        } else {\r\n            alert(`Failed to add tank, status code = ${response.status}`);\r\n        }\r\n        history.push(\"/tanks\");\r\n    };\r\n\r\n    const onCancel = async () => {\r\n        history.push(\"/tanks\");\r\n    };\r\n\r\n    // Function will call the endpoint\r\n    const loadMaterials = async () => {\r\n        const response = await fetch('/Materials');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        const sortedMaterials = data.sort((a, b) => {   // This will sort the array so the item ID passed into edit page is the first array element\r\n            if (a.materialID === materialID) return -1\r\n            return 0\r\n        })\r\n        // const materialName = data.find(material => material.materialID === materialID)\r\n        setMaterials(sortedMaterials)\r\n        setMaterialID(sortedMaterials[0]?.materialID)  // materialID will only get set if [0] is defined\r\n    }\r\n\r\n    // Function will call the endpoint\r\n    const loadTankTypes = async () => {\r\n        const response = await fetch('/TankTypes');\r\n        const data = await response.json();  // Returns the body of the response as a json\r\n        const sortedTankTypes = data.sort((a, b) => {   // This will sort the array so the item ID passed into edit page is the first array element\r\n            if (a.tankTypeID === tankTypeID) return -1\r\n            return 0\r\n        })\r\n        // const materialName = data.find(material => material.materialID === materialID)\r\n        setTankTypes(sortedTankTypes);\r\n        setTankTypeID(sortedTankTypes[0]?.tankTypeID);\r\n    }\r\n\r\n    // Call loadTests when page is initialized\r\n    useEffect(() => {\r\n        loadMaterials();\r\n        loadTankTypes();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h2>Add a Tank</h2>\r\n            <table id=\"newTank\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Tank Number</th>\r\n                        <th>Tank Type</th>\r\n                        <th>Pumpable Volume</th>\r\n                        <th>Capacity</th>\r\n                        <th>Material Name</th>\r\n                        <th>Src/Dest</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <td>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={tankName}\r\n                            placeholder=\"(i.e. 123)\"\r\n                            onChange={e => {\r\n                                if (!isNaN(Number(e.target.value)) || e.target.value.length === 0) setTankName(e.target.value)\r\n                                //if (/^\\d+(?:[a-zA-Z])?$/.test(e.target.value)) setTankName(e.target.value)\r\n                            }} />\r\n                    </td>\r\n                    {/* <td>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={tankTypeID}\r\n                        placeholder=\"tank type ID\"\r\n                        onChange={e => setTankTypeID(e.target.value)} />\r\n                </td> */}\r\n                    <td>\r\n                        <select\r\n                            onChange={e => setTankTypeID(e.target.value)} >\r\n                            {tankTypes.map((tankType, index) => <option key={index} value={tankType.tankTypeID}>{tankType.tankTypeName}</option>)}\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={pumpableVol}\r\n                            placeholder=\"pumpable volume\"\r\n                            onChange={e => setPumpableVol(e.target.value)} />\r\n                    </td>\r\n                    <td>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={capacity}\r\n                            placeholder=\"capacity\"\r\n                            onChange={e => setCapacity(e.target.value)} />\r\n                    </td>\r\n                    <td>\r\n                        <select\r\n                            onChange={e => setMaterialID(e.target.value)} >\r\n                            {materials.map((material, index) => <option key={index} value={material.materialID}>{material.materialName}</option>)}\r\n                        </select>\r\n                    </td>\r\n                    {/* <td>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={srcOrDest}\r\n                        placeholder=\"source/destination\"\r\n                        onChange={e => setSrcOrDest(e.target.value)} />\r\n                </td> */}\r\n                    <td>\r\n                        <select onChange={e => setSrcOrDest(e.target.value)} >\r\n                            <option value=\"source\">source</option>\r\n                            <option value=\"destination\">destination</option>\r\n                        </select>\r\n                    </td>\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className='createCancel'>\r\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\r\n                <div className='flex-right'><button onClick={addTank}>Create</button></div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateTankPage;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport 'react-dropdown/style.css';\r\n\r\n\r\nexport const CreateTaskPage = () => {\r\n    const [taskVolume, setTaskVolume] = useState([]);\r\n    const [destinationTankID, setDestinationTankID] = useState([])\r\n    const [sourceTankIDs, setSourceTankIDs] = useState([])\r\n    const [destinationTank, setDestinationTank] = useState([]);\r\n    const [sourceTank, setSourceTank] = useState([]);\r\n    \r\n    const history = useHistory();\r\n\r\n    const addTask = async () => { \r\n        let transaction = {}\r\n        transaction.newTask = {taskVolume};\r\n        transaction.newDestination = {destinationTankID}\r\n        transaction.newSources = {sourceTankIDs}\r\n        console.log(`Transaction is keys: ${Object.keys(transaction)} and values: ${Object.values(transaction)}`);\r\n        console.log(`Transaction.newTask is keys: ${Object.keys(transaction.newTask)} and values: ${Object.values(transaction.newTask)}`)\r\n        console.log(`Transaction.newDestination is keys: ${Object.keys(transaction.newDestination)} and values: ${Object.values(transaction.newDestination)}`)\r\n        console.log(`Transaction.newSources is keys: ${Object.keys(transaction.newSources)} and values: ${Object.values(transaction.newSources)}`)\r\n        \r\n        // Add data validation to ensure that the volume is a number > 0:\r\n        const volumeValid = taskVolume !== null && !isNaN(taskVolume) && taskVolume > 0;\r\n        console.log(`volumeValid = ${volumeValid}`);\r\n        \r\n        // Add data validation to ensure a destination is chosen.\r\n        const destinationValid = destinationTankID.length >= 1;\r\n        console.log(`destinationTankID = ${destinationTankID}`)\r\n        console.log(`destinationTankID.length = ${destinationTankID.length}`)\r\n        console.log(`destinationValid = ${destinationValid}`)\r\n        \r\n        // Add data validation to ensure at least one source is chosen.\r\n        const sourceValid = sourceTankIDs.length >= 1;\r\n        console.log(`sourceTankIDs = ${sourceTankIDs}`)\r\n        console.log(`sourceTankIDs.length = ${sourceTankIDs.length}`)\r\n        console.log(`sourceValid = ${sourceValid}`)\r\n\r\n        if (volumeValid && destinationValid && sourceValid){\r\n            const response = await fetch('/tasks', {\r\n                method: 'POST',\r\n                body: JSON.stringify(transaction),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n            if (response.status === 201){\r\n                alert(\"Successfully added the task.\");\r\n            } else {\r\n                alert(`Failed to add task, status code = ${response.status}`);\r\n            }\r\n            history.push(\"/tasks\");\r\n        } else {\r\n            alert(\"Data validation failed.  Volume must be number greater than zero.  One destionation tank must be selected.  At least one source tank must be selected.\")\r\n        }\r\n\r\n    };\r\n\r\n    const onCancel = async () => {\r\n        history.push(\"/tasks\");\r\n    };\r\n\r\n    const loadDestinationTanks = async () => {\r\n        const response = await fetch('/destinationTankDropdown');\r\n        const data = await response.json();\r\n        setDestinationTank(data);\r\n    }\r\n\r\n    const loadSourceTanks = async () => {\r\n        const response = await fetch('/sourceTankDropdown');\r\n        const data = await response.json();\r\n        setSourceTank(data);\r\n    }\r\n\r\n    // Call loadDestinationTanks and loadSourceTanks when page is initialized\r\n    useEffect(() => {\r\n        loadDestinationTanks();\r\n        loadSourceTanks();\r\n    }, []);\r\n\r\n    console.log(`destinationTank = ${destinationTank}`);\r\n    console.log(`sourceTank = ${sourceTank}`);\r\n\r\n    return (\r\n        <>\r\n        <h2>Add a Task</h2>\r\n        <p>This page adds a task and executes a transaction which ensures 1 destination tank and 1 or more source tanks.</p>\r\n        <table id=\"newTask\">\r\n        <thead>\r\n                <tr>\r\n                    <th>Task Volume (bbls)</th>\r\n                    <th>Destination Tank</th>\r\n                    <th>Source Tanks</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <td>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={taskVolume}\r\n                        placeholder=\"Number > 0\"\r\n                        onChange={e => setTaskVolume(e.target.value)} />\r\n                </td>\r\n                <td>\r\n                    <select name=\"destination_tank\"\r\n                        onChange={e => setDestinationTankID(e.target.value)} >\r\n                        <option disabled=\"disabled\" selected=\"selected\">Select a destination tank.</option>\r\n                        {destinationTank.map((destination, index) => <option key={index} value={destination.tankID}>{destination.tankName + ': ' + destination.tankInfo}</option>)}\r\n                    </select>\r\n                </td>  \r\n                <td>\r\n                    <select name=\"source_tanks[]\" multiple=\"multiple\"\r\n                        onChange={e => setSourceTankIDs(Array.from(e.target.selectedOptions, (option) => option.value))} >\r\n                        {sourceTank.map((source, index) => <option key={index} value={source.tankID}>{source.tankName + ': ' + source.tankInfo}</option>)}\r\n                    </select>\r\n                </td>\r\n                \r\n            </tbody>\r\n        </table>\r\n        \r\n        {console.log(`Destination tank IDs: ${destinationTankID}`)}\r\n        {console.log(`Source tank IDs: ${sourceTankIDs}`)}\r\n\r\n\r\n        <div className='createCancel'>\r\n            <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\r\n            <div className='flex-right'><button onClick={addTask}>Create</button></div>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateTaskPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport  Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\n\r\n\r\n// export const CreateLineupPage = ({ lineupToRepeat }) => {\r\nexport const CreateLineupPage = () => {\r\n    // console.log(lineupToRepeat);\r\n    // let repeatLineup = Object.keys(lineupToRepeat).length !== 0;\r\n    // console.log(repeatLineup)\r\n    const [taskID, setTaskID] = useState([]);\r\n    const [tankID, setTankID] = useState([]);\r\n    const [tanks, setTanks] = useState([]);\r\n    const [tasks, setTasks] = useState([]);\r\n    \r\n    const history = useHistory();\r\n\r\n    const addLineup = async () => {\r\n        const newLineup = { taskID, tankID };\r\n        console.log(newLineup)\r\n        const response = await fetch('/lineups', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newLineup),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        if (response.status === 201){\r\n            alert(\"Successfully added the lineup.\");\r\n        } else {\r\n            alert(`Failed to add lineup, status code = ${response.status}`);\r\n        }\r\n        history.push(\"/lineups\");\r\n    };\r\n\r\n    const onCancel = async () => {\r\n        history.push(\"/lineups\");\r\n    };\r\n\r\n    // Function will call the endpoint\r\n    const loadTanks = async () => {\r\n        const response = await fetch('/tanksDropdown');\r\n        const data = await response.json(); \r\n        setTanks(data);\r\n    }\r\n\r\n    // Function will call the endpoint\r\n    const loadTasks = async () => {\r\n        const response = await fetch('/tasksDropdown');\r\n        const data = await response.json();  \r\n        setTasks(data);\r\n    }\r\n\r\n        // Call loadTanks and loadTasks when page is initialized\r\n        useEffect(() => {\r\n            loadTanks();\r\n            loadTasks();\r\n        }, []);\r\n    \r\n\r\n    return (\r\n        <>\r\n        <h2>Add a Lineup</h2>\r\n        <p>Note: It is NOT recommended to use this page to add Lineups.  Use the Tasks page instead.</p>\r\n        <table id=\"newLineup\">\r\n        <thead>\r\n                <tr>\r\n                    <th>Task</th>\r\n                    <th>Tank</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <td>\r\n                    <select\r\n                        onChange={e => setTaskID(e.target.value)} >\r\n                        {tasks.map((task, index) => <option key={index} value={task.taskID}>{task.taskInfo}</option>)}\r\n                    </select>\r\n                </td>\r\n                <td>\r\n                    <select\r\n                        onChange={e => setTankID(e.target.value)} >\r\n                        {tanks.map((tank, index) => <option key={index} value={tank.tankID}>{tank.tankInfo}</option>)}\r\n                    </select>\r\n                </td>   \r\n            </tbody>\r\n        </table>\r\n        \r\n        <div className='createCancel'>\r\n            <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\r\n            <div className='flex-right'><button onClick={addLineup}>Create</button></div>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateLineupPage;","import React, { useState } from 'react';\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\nimport SelectUnits from '../components/unitSelection';\r\n\r\n// const options = ['lbs', 'kgs']\r\n// const defaultOption = options[0]\r\n\r\n// export const CreateMaterialPage = ({ materialToRepeat }) => {\r\nexport const CreateMaterialPage = () => {\r\n    // console.log(materialToRepeat);\r\n    // let repeatMaterial = Object.keys(materialToRepeat).length !== 0;\r\n    // console.log(repeatMaterial)\r\n\r\n    const [materialName, setMaterialName] = useState();\r\n\r\n    const history = useHistory();\r\n\r\n    const addMaterial = async () => {\r\n        // Data validation\r\n        // Ensure material name exists\r\n        if (!materialName) return alert(\"Please enter a material name.\");\r\n\r\n        const newMaterial = { materialName };\r\n        console.log(newMaterial)\r\n        const response = await fetch('/materials', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newMaterial),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        if (response.status === 201) {\r\n            alert(\"Successfully added the material.\");\r\n        } else {\r\n            alert(`Failed to add material, status code = ${response.status}`);\r\n        }\r\n        history.push(\"/materials\");\r\n    };\r\n\r\n    const onCancel = async () => {\r\n        history.push(\"/materials\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2>Add a Material</h2>\r\n            <table id=\"newMaterial\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Material Name</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <td>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={materialName}\r\n                            placeholder=\"name of material\"\r\n                            onChange={e => setMaterialName(e.target.value)} />\r\n                    </td>\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className='createCancel'>\r\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\r\n                <div className='flex-right'><button onClick={addMaterial}>Create</button></div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateMaterialPage;","import React, { useEffect, useState } from 'react';\nimport { useHistory, Link } from \"react-router-dom\";\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport SelectUnits from '../components/unitSelection';\n\n// const options = ['lbs', 'kgs']\n// const defaultOption = options[0]\n\n// export const CreateSpecificationPage = ({ specificationToRepeat }) => {\nexport const CreateSpecificationPage = () => {\n    // console.log(specificationToRepeat);\n    // let repeatSpecification = Object.keys(specificationToRepeat).length !== 0;\n    // console.log(repeatSpecification)\n    const [maxLimit, setMaxLimit] = useState();\n    const [minLimit, setMinLimit] = useState();\n    const [testID, setTestID] = useState([]);\n    const [materialID, setMaterialID] = useState([]);\n    const [tests, setTests] = useState([]);\n    const [materials, setMaterials] = useState([]);\n\n    const history = useHistory();\n\n    const addSpecification = async () => {\n        // Data validation\n        // Ensure min and max limits are not undefined and have a value.\n        if (!maxLimit || !minLimit) return alert(\"Please enter min and max limits\")\n\n        // Ensure max limit is greater than min limit\n        if (parseInt(maxLimit) < parseInt(minLimit)) return alert(\"Please ensure max limit is greater than min limit\")\n\n\n        const newSpecification = { maxLimit, minLimit, testID, materialID };\n        console.log(newSpecification)\n        const response = await fetch('/specifications', {\n            method: 'POST',\n            body: JSON.stringify(newSpecification),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n        if (response.status === 201) {\n            alert(\"Successfully added the specification.\");\n        } else {\n            alert(`Failed to add specification, status code = ${response.status}`);\n        }\n        history.push(\"/specifications\");\n    };\n\n    const onCancel = async () => {\n        history.push(\"/specifications\");\n    };\n\n    // Function will call the endpoint\n    const loadTests = async () => {\n        const response = await fetch('/Tests');\n        const data = await response.json();  // Returns the body of the response as a json\n        setTests(data); // If we want the react framework to know that we've updated a variable then we have to update useState\n        setTestID(data[0]?.testID)\n    }\n\n    // Function will call the endpoint\n    const loadMaterials = async () => {\n        const response = await fetch('/Materials');\n        const data = await response.json();  // Returns the body of the response as a json\n        setMaterials(data); // If we want the react framework to know that we've updated a variable then we have to update useState\n        setMaterialID(data[0]?.materialID)\n    }\n\n    // Call loadTests when page is initialized\n    useEffect(() => {\n        loadTests();\n        loadMaterials();\n    }, []);\n\n\n    // Code isn't necessary but didn't delete, just in case\n    //const handleChange = event => {\n    //    console.log('Label 👉️', event.target.selectedOptions[0].label);\n    //    console.log(event.target.value);\n    //    setTestID(event.target.value);\n    //  };\n\n\n    return (\n        <>\n            <h2>Add a Specification</h2>\n            <table id=\"newSpecification\">\n                <thead>\n                    <tr>\n                        <th>Max Limit</th>\n                        <th>Min Limit</th>\n                        <th>Test</th>\n                        <th>Material</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <td>\n                        <input\n                            type=\"number\"\n                            value={maxLimit}\n                            placeholder=\"max limit\"\n                            onChange={e => setMaxLimit(e.target.value)} />\n                    </td>\n                    <td>\n                        <input\n                            type=\"number\"\n                            value={minLimit}\n                            placeholder=\"min limit\"\n                            onChange={e => setMinLimit(e.target.value)} />\n                    </td>\n                    <td>\n                        <select onChange={e => setTestID(e.target.value)} >\n                            {tests.map((test, index) => <option key={index} value={test.testID}>{test.testName}</option>)}\n                        </select>\n                    </td>\n                    <td>\n                        <select onChange={e => setMaterialID(e.target.value)} >\n                            {materials.map((material, index) => <option key={index} value={material.materialID}>{material.materialName}</option>)}\n                        </select>\n                    </td>\n                </tbody>\n            </table>\n\n            <div className='createCancel'>\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\n                <div className='flex-right'><button onClick={addSpecification}>Create</button></div>\n            </div>\n        </>\n    );\n}\n\nexport default CreateSpecificationPage;","import React, { useState } from 'react';\nimport { useHistory, Link } from \"react-router-dom\";\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport SelectUnits from '../components/unitSelection';\n\n// const options = ['lbs', 'kgs']\n// const defaultOption = options[0]\n\n// export const CreateTestPage = ({ testToRepeat }) => {\nexport const CreateTestPage = () => {\n    // console.log(testToRepeat);\n    // let repeatTest = Object.keys(testToRepeat).length !== 0;\n    // console.log(repeatTest)\n    const [testNumber, setTestNumber] = useState('');\n    const [testName, setTestName] = useState();\n    const [testDescription, setTestDescription] = useState();\n\n    const history = useHistory();\n\n    const addTest = async () => {\n        // Data validation\n        // Check if test number exists\n        if (!testNumber) return alert(\"Please enter a test number\")\n\n        // Check if names and descriptions exist\n        if (!testName || !testDescription) return alert(\"Please enter a test name and test description\");\n\n        const newTest = { testNumber: 'D' + testNumber, testName, testDescription };\n        console.log(newTest)\n        const response = await fetch('/tests', {\n            method: 'POST',\n            body: JSON.stringify(newTest),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n        if (response.status === 201) {\n            alert(\"Successfully added the test.\");\n        } else {\n            alert(`Failed to add test, status code = ${response.status}`);\n        }\n        history.push(\"/tests\");\n    };\n\n    const onCancel = async () => {\n        history.push(\"/tests\");\n    };\n\n    return (\n        <>\n            <h2>Add a Test</h2>\n            <table id=\"newTest\">\n                <thead>\n                    <tr>\n                        <th>Test Number</th>\n                        <th>Test Name</th>\n                        <th>Test Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <td>\n                        <input\n                            type=\"text\"\n                            value={testNumber}\n                            placeholder=\"i.e. 123\"\n                            onChange={e => {\n                                if (!isNaN(Number(e.target.value)) || e.target.value.length === 0) setTestNumber(e.target.value)\n                            }} />\n                    </td>\n                    <td>\n                        <input\n                            type=\"text\"\n                            value={testName}\n                            placeholder=\"name of test\"\n                            onChange={e => setTestName(e.target.value)} />\n                    </td>\n                    <td>\n                        <input\n                            type=\"text\"\n                            value={testDescription}\n                            placeholder=\"description of test\"\n                            onChange={e => setTestDescription(e.target.value)} />\n                    </td>\n                </tbody>\n            </table>\n\n            <div className='createCancel'>\n                <div className='flex-left'><button onClick={onCancel}>Cancel</button></div>\n                <div className='flex-right'><button onClick={addTest}>Create</button></div>\n            </div>\n        </>\n    );\n}\n\nexport default CreateTestPage;","import './App.css';\nimport React from 'react';\nimport { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n\n// Non database pages and components\nimport HomePage from './pages/HomePage';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport Navigation from './components/Navigation';\n\n// References to tables directly\nimport TankTypePage from './pages/TankTypePage';\nimport TankPage from './pages/TankPage';\nimport TaskPage from './pages/TaskPage';\nimport LineupPage from './pages/LineupPage';\nimport MaterialPage from './pages/MaterialPage';\nimport SpecificationPage from './pages/SpecificationPage';\nimport TestPage from './pages/TestPage';\n\n// References to edit pages\nimport EditTankTypePage from './pages/EditTankTypePage';\nimport EditTankPage from './pages/EditTankPage';\nimport EditTaskPage from './pages/EditTaskPage';\nimport EditLineupPage from './pages/EditLineupPage';\nimport EditMaterialPage from './pages/EditMaterialPage';\nimport EditSpecificationPage from './pages/EditSpecificationPage';\nimport EditTestPage from './pages/EditTestPage';\n\n// References to create pages\nimport CreateTankTypePage from './pages/CreateTankTypePage';\nimport CreateTankPage from './pages/CreateTankPage';\nimport CreateTaskPage from './pages/CreateTaskPage';\nimport CreateLineupPage from './pages/CreateLineupPage';\nimport CreateMaterialPage from './pages/CreateMaterialPage';\nimport CreateSpecificationPage from './pages/CreateSpecificationPage';\nimport CreateTestPage from './pages/CreateTestPage';\n\nfunction App() {\n  const [tankTypeToEdit, setTankTypeToEdit] = useState([]);\n  const [tankToEdit, setTankToEdit] = useState([]);\n  const [taskToEdit, setTaskToEdit] = useState([])\n  const [lineupToEdit, setLineupToEdit] = useState([])\n  const [materialToEdit, setMaterialToEdit] = useState([])\n  const [specificationToEdit, setSpecificationToEdit] = useState([])\n  const [testToEdit, setTestToEdit] = useState([])\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Navigation />\n            <Switch>\n              {/* To the tables directly */}\n                <Route exact path=\"/\" component={HomePage}></Route>\n                <Route path=\"/TankTypes\"><TankTypePage setTankTypeToEdit={setTankTypeToEdit}/></Route>\n                <Route path=\"/Tanks\"><TankPage setTankToEdit={setTankToEdit}/></Route>\n                <Route path=\"/Tasks\"><TaskPage setTaskToEdit={setTaskToEdit}/></Route>\n                <Route path=\"/Lineups\"><LineupPage setLineupToEdit={setLineupToEdit}/></Route>\n                <Route path=\"/Materials\"><MaterialPage setMaterialToEdit={setMaterialToEdit}/></Route>\n                <Route path=\"/Specifications\"><SpecificationPage setSpecificationToEdit={setSpecificationToEdit}/></Route>\n                <Route path=\"/Tests\"><TestPage setTestToEdit={setTestToEdit}/></Route>\n\n              {/* To the edit pages */}\n                <Route path=\"/edit-tankType\"><EditTankTypePage  tankTypeToEdit={tankTypeToEdit}/></Route>\n                <Route path=\"/edit-tank\"><EditTankPage  tankToEdit={tankToEdit}/></Route>\n                <Route path=\"/edit-task\"><EditTaskPage  taskToEdit={taskToEdit}/></Route>\n                <Route path=\"/edit-lineup\"><EditLineupPage  lineupToEdit={lineupToEdit}/></Route>\n                <Route path=\"/edit-material\"><EditMaterialPage  materialToEdit={materialToEdit}/></Route>\n                <Route path=\"/edit-specification\"><EditSpecificationPage  specificationToEdit={specificationToEdit}/></Route>\n                <Route path=\"/edit-test\"><EditTestPage  testToEdit={testToEdit}/></Route>\n\n              {/* To the create pages */}\n                <Route path=\"/create-tankType\"><CreateTankTypePage /></Route>\n                <Route path=\"/create-tank\"><CreateTankPage /></Route>\n                <Route path=\"/create-task\"><CreateTaskPage /></Route>\n                <Route path=\"/create-lineup\"><CreateLineupPage /></Route>\n                <Route path=\"/create-material\"><CreateMaterialPage /></Route>\n                <Route path=\"/create-specification\"><CreateSpecificationPage /></Route>\n                <Route path=\"/create-test\"><CreateTestPage /></Route>\n\n            </Switch>    \n        <Footer />\n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}